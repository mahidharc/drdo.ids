from algo8 import *from parser import *def deploy(stream, awc, filename):  # This module tests the input traffic and computes if a window is an attack window or not  a = 0.0  f = open('thresholdP','r')  thresholdP = float(f.read())  f.close()  #Open Dataset file and parse it  inputTraffic = parse(filename)  # Calculate number of windows  windowCount = inputTraffic.size/stream.windowSize  # Intialise the window counts and state of the system  attackWindowCount = 0.0  normalWindowCount = 0.0  state = []  winNo =[]  #Iterate over each window  for i in range(windowCount):    # Determine the probability of the window i    p = determineProbability(inputTraffic[i*100:(i*100)+100], stream)    if ( p < thresholdP):      #Attack Window      a += 1      attackWindowCount +=1      if a > awc:        a = awc    else:      #Normal Window      a -= 1      normalWindowCount += 1      if a < 0:        a = 0    if a >= awc:      #System under Attack!!!      state = append(state,1)      winNo = append(winNo,i)    else:      #System not under Attack      state = append(state,0)      winNo = append(winNo,i)  #Save the state information and the counts to plot graphs  stream.attackWindowCount = attackWindowCount  stream.normalWindowCount = normalWindowCount  stream.stateArr = state  stream.winNoArr = winNo  return stream